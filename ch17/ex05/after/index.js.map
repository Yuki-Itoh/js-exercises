{"version":3,"file":"index.js","mappings":"mBACO,MAGMA,EAAa,GCDnB,SAASC,EAAWC,EAAMC,GAC/B,IAAK,IAAIC,EAAM,EAAGA,EDHA,GCGYA,IAC5B,IAAK,IAAIC,EAAM,EAAGA,EDHF,GCGcA,IAAO,CACnC,MAAMC,EAAOJ,EAAKE,GAAKC,GACvBF,EAAII,YACJJ,EAAIK,KAAKH,EAAML,EAAYI,EAAMJ,EAAYA,EAAYA,GACzDG,EAAIM,UAAYH,EAAO,QAAU,QACjCH,EAAIO,OACJP,EAAIQ,QACN,CAEJ,CCVA,MAAMC,EAASC,SAASC,cAAc,WAChCX,EAAMS,EAAOG,WAAW,MACxBC,EAAcH,SAASC,cAAc,UACrCG,EAAcJ,SAASC,cAAc,UAE3CF,EAAOM,MAAQC,IACfP,EAAOQ,OAASC,IAGhB,IAAIC,EAAc,KAGlB,MAAMC,EAAQ,IAAIC,MAAM,iBAGxB,IAAItB,EAAO,IAAIuB,MFlBK,IEmBjBf,KAAK,MACLgB,KAAI,IACH,IAAID,MFpBY,IEoBAf,KAAK,MAAMgB,KAAI,MAAQC,KAAKC,MAAsB,EAAhBD,KAAKE,cAkB3D,SAASC,IACP5B,ECtCK,SAAoBA,GAEzB,MAAM6B,EAAW7B,EAAKwB,KAAKM,GAAQ,IAAIA,KAEvC,IAAK,IAAI5B,EAAM,EAAGA,EHNA,GGMYA,IAC5B,IAAK,IAAIC,EAAM,EAAGA,EHNF,GGMcA,IAAO,CAEnC,IAAI4B,EAAS,EACb,IAAK,IAAIC,GAAK,EAAGA,GAAK,EAAGA,IACvB,IAAK,IAAIC,GAAK,EAAGA,GAAK,EAAGA,IAAK,CAC5B,GAAU,IAAND,GAAiB,IAANC,EAAS,SACxB,GAAI/B,EAAM8B,EAAI,GAAK7B,EAAM6B,EAAI,GAAK9B,EAAM8B,GHb9B,IGa2C7B,EAAM6B,GHZjD,GGaR,SACEhC,EAAKE,EAAM8B,GAAG7B,EAAM6B,IACtBD,IAEF,MAAMG,EAAIhC,EAAM8B,EACVG,EAAIhC,EAAM8B,EAEZC,GAAK,GAAKA,EHrBJ,IGqBgBC,GAAK,GAAKA,EHpB1B,KGqBRJ,GAAU/B,EAAKkC,GAAGC,GAAK,EAAI,EAE/B,CAGEnC,EAAKE,GAAKC,IAER4B,EAAS,GAAKA,EAAS,KACzBF,EAAS3B,GAAKC,IAAO,GAIR,IAAX4B,IACFF,EAAS3B,GAAKC,IAAO,EAG3B,CAEF,OAAO0B,CACT,CDDSO,CAAWpC,GAClBD,EAAWC,EAAMC,GACjBmB,EAAciB,sBAAsBT,EACtC,CAlBAlB,EAAO4B,iBAAiB,SAAS,SAAUC,GACzC,MAAMjC,EAAOI,EAAO8B,wBACdC,EAAWF,EAAIG,QAAUpC,EAAKqC,KAA9BF,EAAuCF,EAAIK,QAAUtC,EAAKuC,IAE1D3C,EAAMuB,KAAKC,MAAMe,EAAQ3C,GACzBK,EAAMsB,KAAKC,MAAMe,EAAQ3C,GAC/BE,EAAKE,GAAKC,IAAQH,EAAKE,GAAKC,GAC5BkB,EAAMyB,YAAYC,OAClBhD,EAAWC,EAAMC,EACnB,IAWAa,EAAYwB,iBAAiB,SAAS,KAEhClB,GAGJQ,GAAQ,IAGVb,EAAYuB,iBAAiB,SAAS,KAE/BlB,IAGL4B,qBAAqB5B,GACrBA,EAAc,KAAI,IAGpBrB,EAAWC,EAAMC,E","sources":["webpack://preset-js/./ch17/ex05/before/constants.js","webpack://preset-js/./ch17/ex05/before/renderGrid.js","webpack://preset-js/./ch17/ex05/before/index.js","webpack://preset-js/./ch17/ex05/before/updateGrid.js"],"sourcesContent":["// 50 x 50 の盤面とする\r\nexport const ROWS = 50;\r\nexport const COLS = 50;\r\n// 1セルのサイズ\r\nexport const RESOLUTION = 10;\r\n","import { COLS, RESOLUTION, ROWS } from './constants.js';\r\n\r\n// grid を canvas に描画する\r\nexport function renderGrid(grid, ctx) {\r\n  for (let row = 0; row < ROWS; row++) {\r\n    for (let col = 0; col < COLS; col++) {\r\n      const cell = grid[row][col];\r\n      ctx.beginPath();\r\n      ctx.rect(col * RESOLUTION, row * RESOLUTION, RESOLUTION, RESOLUTION);\r\n      ctx.fillStyle = cell ? 'black' : 'white';\r\n      ctx.fill();\r\n      ctx.stroke();\r\n    }\r\n  }\r\n}\r\n","import { COLS, RESOLUTION, ROWS } from './constants.js';\nimport { renderGrid } from './renderGrid.js';\nimport { updateGrid } from './updateGrid.js';\n\nconst canvas = document.querySelector('#screen');\nconst ctx = canvas.getContext('2d');\nconst startButton = document.querySelector('#start');\nconst pauseButton = document.querySelector('#pause');\n\ncanvas.width = ROWS * RESOLUTION;\ncanvas.height = COLS * RESOLUTION;\n\n// https://developer.mozilla.org/ja/docs/Web/API/Window/requestAnimationFrame が返す ID\nlet animationId = null;\n\n// NOTE: download from https://soundeffect-lab.info/sound/button/mp3/decision1.mp3\nconst sound = new Audio('decision1.mp3');\n\n// ライフゲームのセル (true or false) をランダムに初期化する\nlet grid = new Array(ROWS)\n  .fill(null)\n  .map(() =>\n    new Array(COLS).fill(null).map(() => !!Math.floor(Math.random() * 2))\n  );\n\n// canvas がクリックされたときの処理 (セルの値を反転する)\ncanvas.addEventListener('click', function (evt) {\n  const rect = canvas.getBoundingClientRect();\n  const pos = { x: evt.clientX - rect.left, y: evt.clientY - rect.top };\n\n  const row = Math.floor(pos.y / RESOLUTION);\n  const col = Math.floor(pos.x / RESOLUTION);\n  grid[row][col] = !grid[row][col];\n  sound.cloneNode().play();\n  renderGrid(grid, ctx);\n});\n\n// requestAnimationFrame によって一定間隔で更新・描画を行う\n// NOTE: リフレッシュレートの高い画面では速く実行される (これを防ぐ場合は下記の例を参照)\n// https://developer.mozilla.org/ja/docs/Web/API/Window/requestAnimationFrame\nfunction update() {\n  grid = updateGrid(grid);\n  renderGrid(grid, ctx);\n  animationId = requestAnimationFrame(update);\n}\n\nstartButton.addEventListener('click', () => {\n  // 既にアニメーションが動いている場合は何もしない\n  if (animationId) {\n    return;\n  }\n  update();\n});\n\npauseButton.addEventListener('click', () => {\n  // アニメーションが停止している場合は何もしない\n  if (!animationId) {\n    return;\n  }\n  cancelAnimationFrame(animationId);\n  animationId = null;\n});\n\nrenderGrid(grid, ctx);\n","import { COLS, ROWS } from './constants.js';\r\n\r\n// Life Game のルールに従ってセルを更新する\r\nexport function updateGrid(grid) {\r\n  // 新しいグリッドを作成\r\n  const nextGrid = grid.map((arr) => [...arr]);\r\n\r\n  for (let row = 0; row < ROWS; row++) {\r\n    for (let col = 0; col < COLS; col++) {\r\n      // 周囲のセルの生存数を数えて nextGrid[row][col] に true or false を設定する (実装してね)\r\n      let alives = 0;\r\n      for (let i = -1; i <= 1; i++) {\r\n        for (let j = -1; j <= 1; j++) {\r\n          if (i === 0 && j === 0) continue;\r\n          if (row + i < 0 || col + i < 0 || row + i >= ROWS || col + i >= COLS)\r\n            continue;\r\n          if (grid[row + i][col + i]) {\r\n            alives++;\r\n          }\r\n          const r = row + i;\r\n          const c = col + j;\r\n\r\n          if (r >= 0 && r < ROWS && c >= 0 && c < COLS) {\r\n            alives += grid[r][c] ? 1 : 0;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (grid[row][col]) {\r\n        // 現在生きている場合\r\n        if (alives < 2 || alives > 3) {\r\n          nextGrid[row][col] = false;\r\n        }\r\n      } else {\r\n        // 現在死んでいる場合\r\n        if (alives === 3) {\r\n          nextGrid[row][col] = true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return nextGrid;\r\n}\r\n"],"names":["RESOLUTION","renderGrid","grid","ctx","row","col","cell","beginPath","rect","fillStyle","fill","stroke","canvas","document","querySelector","getContext","startButton","pauseButton","width","ROWS","height","COLS","animationId","sound","Audio","Array","map","Math","floor","random","update","nextGrid","arr","alives","i","j","r","c","updateGrid","requestAnimationFrame","addEventListener","evt","getBoundingClientRect","pos","clientX","left","clientY","top","cloneNode","play","cancelAnimationFrame"],"sourceRoot":""}