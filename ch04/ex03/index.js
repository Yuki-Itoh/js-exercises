// ビット演算のみを用いて減算を行う関数 `sub` を実装しなさい (例: `sub(8, 3)` は `5` を返すものとする)。
// 演算子として用いて良いのは `&`, `|`, `^`, `~`, `<<`, `>>`, `>>>` だけとする (`+` や `===` 等は禁止)。

// ヒント: 与えられた数の 2 の補数はビットの 0, 1 を反転し、1 を加えることで求められる。

/**
 * aとbを加算した結果を返します。
 * @param {number} a 
 * @param {number} b 
 */
export function add(a, b) {
    while (b != 0) {
        // AND演算して、繰り上がるビットを算出。左シフトして実際に繰り上げる(繰り上がる足し算だけを行う)
        const c = (a & b) << 1;

        // XOR演算して、繰り上がらない各ビットの足し算を行う。
        a ^= b;

        // 繰り上がったビットを管理していて、繰り上がりがなくなったら足し算終了。
        b = c;
    }

    return a;
}

/**
 * aからbを減算した結果を返します。
 * @param {number} a 
 * @param {number} b 
 */
export function sub(a, b) {
    return add(a, add(~b, 1));
}